// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newSiteUser(db *gorm.DB, opts ...gen.DOOption) siteUser {
	_siteUser := siteUser{}

	_siteUser.siteUserDo.UseDB(db, opts...)
	_siteUser.siteUserDo.UseModel(&model.SiteUser{})

	tableName := _siteUser.siteUserDo.TableName()
	_siteUser.ALL = field.NewAsterisk(tableName)
	_siteUser.ID = field.NewString(tableName, "id")
	_siteUser.Username = field.NewString(tableName, "username")
	_siteUser.Email = field.NewString(tableName, "email")
	_siteUser.Password = field.NewString(tableName, "password")
	_siteUser.BotUserID = field.NewString(tableName, "botUserId")
	_siteUser.CreatedAt = field.NewTime(tableName, "createdAt")

	_siteUser.fillFieldMap()

	return _siteUser
}

type siteUser struct {
	siteUserDo siteUserDo

	ALL       field.Asterisk
	ID        field.String
	Username  field.String
	Email     field.String
	Password  field.String
	BotUserID field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s siteUser) Table(newTableName string) *siteUser {
	s.siteUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s siteUser) As(alias string) *siteUser {
	s.siteUserDo.DO = *(s.siteUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *siteUser) updateTableName(table string) *siteUser {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Username = field.NewString(table, "username")
	s.Email = field.NewString(table, "email")
	s.Password = field.NewString(table, "password")
	s.BotUserID = field.NewString(table, "botUserId")
	s.CreatedAt = field.NewTime(table, "createdAt")

	s.fillFieldMap()

	return s
}

func (s *siteUser) WithContext(ctx context.Context) *siteUserDo { return s.siteUserDo.WithContext(ctx) }

func (s siteUser) TableName() string { return s.siteUserDo.TableName() }

func (s siteUser) Alias() string { return s.siteUserDo.Alias() }

func (s siteUser) Columns(cols ...field.Expr) gen.Columns { return s.siteUserDo.Columns(cols...) }

func (s *siteUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *siteUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["email"] = s.Email
	s.fieldMap["password"] = s.Password
	s.fieldMap["botUserId"] = s.BotUserID
	s.fieldMap["createdAt"] = s.CreatedAt
}

func (s siteUser) clone(db *gorm.DB) siteUser {
	s.siteUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s siteUser) replaceDB(db *gorm.DB) siteUser {
	s.siteUserDo.ReplaceDB(db)
	return s
}

type siteUserDo struct{ gen.DO }

func (s siteUserDo) Debug() *siteUserDo {
	return s.withDO(s.DO.Debug())
}

func (s siteUserDo) WithContext(ctx context.Context) *siteUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s siteUserDo) ReadDB() *siteUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s siteUserDo) WriteDB() *siteUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s siteUserDo) Session(config *gorm.Session) *siteUserDo {
	return s.withDO(s.DO.Session(config))
}

func (s siteUserDo) Clauses(conds ...clause.Expression) *siteUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s siteUserDo) Returning(value interface{}, columns ...string) *siteUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s siteUserDo) Not(conds ...gen.Condition) *siteUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s siteUserDo) Or(conds ...gen.Condition) *siteUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s siteUserDo) Select(conds ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s siteUserDo) Where(conds ...gen.Condition) *siteUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s siteUserDo) Order(conds ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s siteUserDo) Distinct(cols ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s siteUserDo) Omit(cols ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s siteUserDo) Join(table schema.Tabler, on ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s siteUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s siteUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s siteUserDo) Group(cols ...field.Expr) *siteUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s siteUserDo) Having(conds ...gen.Condition) *siteUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s siteUserDo) Limit(limit int) *siteUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s siteUserDo) Offset(offset int) *siteUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s siteUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *siteUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s siteUserDo) Unscoped() *siteUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s siteUserDo) Create(values ...*model.SiteUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s siteUserDo) CreateInBatches(values []*model.SiteUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s siteUserDo) Save(values ...*model.SiteUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s siteUserDo) First() (*model.SiteUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteUser), nil
	}
}

func (s siteUserDo) Take() (*model.SiteUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteUser), nil
	}
}

func (s siteUserDo) Last() (*model.SiteUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteUser), nil
	}
}

func (s siteUserDo) Find() ([]*model.SiteUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.SiteUser), err
}

func (s siteUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SiteUser, err error) {
	buf := make([]*model.SiteUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s siteUserDo) FindInBatches(result *[]*model.SiteUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s siteUserDo) Attrs(attrs ...field.AssignExpr) *siteUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s siteUserDo) Assign(attrs ...field.AssignExpr) *siteUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s siteUserDo) Joins(fields ...field.RelationField) *siteUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s siteUserDo) Preload(fields ...field.RelationField) *siteUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s siteUserDo) FirstOrInit() (*model.SiteUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteUser), nil
	}
}

func (s siteUserDo) FirstOrCreate() (*model.SiteUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteUser), nil
	}
}

func (s siteUserDo) FindByPage(offset int, limit int) (result []*model.SiteUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s siteUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s siteUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s siteUserDo) Delete(models ...*model.SiteUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *siteUserDo) withDO(do gen.Dao) *siteUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
