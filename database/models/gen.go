// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		Ad:                  newAd(db, opts...),
		BotUser:             newBotUser(db, opts...),
		CasinoBet:           newCasinoBet(db, opts...),
		CasinoSession:       newCasinoSession(db, opts...),
		Chatgpt:             newChatgpt(db, opts...),
		DailyBonu:           newDailyBonu(db, opts...),
		EuNunca:             newEuNunca(db, opts...),
		Group:               newGroup(db, opts...),
		SiteUser:            newSiteUser(db, opts...),
		VerificationRequest: newVerificationRequest(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Ad                  ad
	BotUser             botUser
	CasinoBet           casinoBet
	CasinoSession       casinoSession
	Chatgpt             chatgpt
	DailyBonu           dailyBonu
	EuNunca             euNunca
	Group               group
	SiteUser            siteUser
	VerificationRequest verificationRequest
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Ad:                  q.Ad.clone(db),
		BotUser:             q.BotUser.clone(db),
		CasinoBet:           q.CasinoBet.clone(db),
		CasinoSession:       q.CasinoSession.clone(db),
		Chatgpt:             q.Chatgpt.clone(db),
		DailyBonu:           q.DailyBonu.clone(db),
		EuNunca:             q.EuNunca.clone(db),
		Group:               q.Group.clone(db),
		SiteUser:            q.SiteUser.clone(db),
		VerificationRequest: q.VerificationRequest.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Ad:                  q.Ad.replaceDB(db),
		BotUser:             q.BotUser.replaceDB(db),
		CasinoBet:           q.CasinoBet.replaceDB(db),
		CasinoSession:       q.CasinoSession.replaceDB(db),
		Chatgpt:             q.Chatgpt.replaceDB(db),
		DailyBonu:           q.DailyBonu.replaceDB(db),
		EuNunca:             q.EuNunca.replaceDB(db),
		Group:               q.Group.replaceDB(db),
		SiteUser:            q.SiteUser.replaceDB(db),
		VerificationRequest: q.VerificationRequest.replaceDB(db),
	}
}

type queryCtx struct {
	Ad                  *adDo
	BotUser             *botUserDo
	CasinoBet           *casinoBetDo
	CasinoSession       *casinoSessionDo
	Chatgpt             *chatgptDo
	DailyBonu           *dailyBonuDo
	EuNunca             *euNuncaDo
	Group               *groupDo
	SiteUser            *siteUserDo
	VerificationRequest *verificationRequestDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Ad:                  q.Ad.WithContext(ctx),
		BotUser:             q.BotUser.WithContext(ctx),
		CasinoBet:           q.CasinoBet.WithContext(ctx),
		CasinoSession:       q.CasinoSession.WithContext(ctx),
		Chatgpt:             q.Chatgpt.WithContext(ctx),
		DailyBonu:           q.DailyBonu.WithContext(ctx),
		EuNunca:             q.EuNunca.WithContext(ctx),
		Group:               q.Group.WithContext(ctx),
		SiteUser:            q.SiteUser.WithContext(ctx),
		VerificationRequest: q.VerificationRequest.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
