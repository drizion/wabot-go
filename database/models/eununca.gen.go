// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newEuNunca(db *gorm.DB, opts ...gen.DOOption) euNunca {
	_euNunca := euNunca{}

	_euNunca.euNuncaDo.UseDB(db, opts...)
	_euNunca.euNuncaDo.UseModel(&model.EuNunca{})

	tableName := _euNunca.euNuncaDo.TableName()
	_euNunca.ALL = field.NewAsterisk(tableName)
	_euNunca.ID = field.NewInt32(tableName, "id")
	_euNunca.Text = field.NewString(tableName, "text")
	_euNunca.CreatedAt = field.NewTime(tableName, "createdAt")

	_euNunca.fillFieldMap()

	return _euNunca
}

type euNunca struct {
	euNuncaDo euNuncaDo

	ALL       field.Asterisk
	ID        field.Int32
	Text      field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e euNunca) Table(newTableName string) *euNunca {
	e.euNuncaDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e euNunca) As(alias string) *euNunca {
	e.euNuncaDo.DO = *(e.euNuncaDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *euNunca) updateTableName(table string) *euNunca {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Text = field.NewString(table, "text")
	e.CreatedAt = field.NewTime(table, "createdAt")

	e.fillFieldMap()

	return e
}

func (e *euNunca) WithContext(ctx context.Context) *euNuncaDo { return e.euNuncaDo.WithContext(ctx) }

func (e euNunca) TableName() string { return e.euNuncaDo.TableName() }

func (e euNunca) Alias() string { return e.euNuncaDo.Alias() }

func (e euNunca) Columns(cols ...field.Expr) gen.Columns { return e.euNuncaDo.Columns(cols...) }

func (e *euNunca) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *euNunca) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["text"] = e.Text
	e.fieldMap["createdAt"] = e.CreatedAt
}

func (e euNunca) clone(db *gorm.DB) euNunca {
	e.euNuncaDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e euNunca) replaceDB(db *gorm.DB) euNunca {
	e.euNuncaDo.ReplaceDB(db)
	return e
}

type euNuncaDo struct{ gen.DO }

func (e euNuncaDo) Debug() *euNuncaDo {
	return e.withDO(e.DO.Debug())
}

func (e euNuncaDo) WithContext(ctx context.Context) *euNuncaDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e euNuncaDo) ReadDB() *euNuncaDo {
	return e.Clauses(dbresolver.Read)
}

func (e euNuncaDo) WriteDB() *euNuncaDo {
	return e.Clauses(dbresolver.Write)
}

func (e euNuncaDo) Session(config *gorm.Session) *euNuncaDo {
	return e.withDO(e.DO.Session(config))
}

func (e euNuncaDo) Clauses(conds ...clause.Expression) *euNuncaDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e euNuncaDo) Returning(value interface{}, columns ...string) *euNuncaDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e euNuncaDo) Not(conds ...gen.Condition) *euNuncaDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e euNuncaDo) Or(conds ...gen.Condition) *euNuncaDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e euNuncaDo) Select(conds ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e euNuncaDo) Where(conds ...gen.Condition) *euNuncaDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e euNuncaDo) Order(conds ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e euNuncaDo) Distinct(cols ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e euNuncaDo) Omit(cols ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e euNuncaDo) Join(table schema.Tabler, on ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e euNuncaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e euNuncaDo) RightJoin(table schema.Tabler, on ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e euNuncaDo) Group(cols ...field.Expr) *euNuncaDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e euNuncaDo) Having(conds ...gen.Condition) *euNuncaDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e euNuncaDo) Limit(limit int) *euNuncaDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e euNuncaDo) Offset(offset int) *euNuncaDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e euNuncaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *euNuncaDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e euNuncaDo) Unscoped() *euNuncaDo {
	return e.withDO(e.DO.Unscoped())
}

func (e euNuncaDo) Create(values ...*model.EuNunca) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e euNuncaDo) CreateInBatches(values []*model.EuNunca, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e euNuncaDo) Save(values ...*model.EuNunca) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e euNuncaDo) First() (*model.EuNunca, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EuNunca), nil
	}
}

func (e euNuncaDo) Take() (*model.EuNunca, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EuNunca), nil
	}
}

func (e euNuncaDo) Last() (*model.EuNunca, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EuNunca), nil
	}
}

func (e euNuncaDo) Find() ([]*model.EuNunca, error) {
	result, err := e.DO.Find()
	return result.([]*model.EuNunca), err
}

func (e euNuncaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EuNunca, err error) {
	buf := make([]*model.EuNunca, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e euNuncaDo) FindInBatches(result *[]*model.EuNunca, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e euNuncaDo) Attrs(attrs ...field.AssignExpr) *euNuncaDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e euNuncaDo) Assign(attrs ...field.AssignExpr) *euNuncaDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e euNuncaDo) Joins(fields ...field.RelationField) *euNuncaDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e euNuncaDo) Preload(fields ...field.RelationField) *euNuncaDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e euNuncaDo) FirstOrInit() (*model.EuNunca, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EuNunca), nil
	}
}

func (e euNuncaDo) FirstOrCreate() (*model.EuNunca, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EuNunca), nil
	}
}

func (e euNuncaDo) FindByPage(offset int, limit int) (result []*model.EuNunca, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e euNuncaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e euNuncaDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e euNuncaDo) Delete(models ...*model.EuNunca) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *euNuncaDo) withDO(do gen.Dao) *euNuncaDo {
	e.DO = *do.(*gen.DO)
	return e
}
