// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newVerificationRequest(db *gorm.DB, opts ...gen.DOOption) verificationRequest {
	_verificationRequest := verificationRequest{}

	_verificationRequest.verificationRequestDo.UseDB(db, opts...)
	_verificationRequest.verificationRequestDo.UseModel(&model.VerificationRequest{})

	tableName := _verificationRequest.verificationRequestDo.TableName()
	_verificationRequest.ALL = field.NewAsterisk(tableName)
	_verificationRequest.ID = field.NewInt32(tableName, "id")
	_verificationRequest.UserID = field.NewString(tableName, "userId")
	_verificationRequest.Password = field.NewString(tableName, "password")
	_verificationRequest.Code = field.NewString(tableName, "code")
	_verificationRequest.ExpirationTimestamp = field.NewInt64(tableName, "expirationTimestamp")

	_verificationRequest.fillFieldMap()

	return _verificationRequest
}

type verificationRequest struct {
	verificationRequestDo verificationRequestDo

	ALL                 field.Asterisk
	ID                  field.Int32
	UserID              field.String
	Password            field.String
	Code                field.String
	ExpirationTimestamp field.Int64

	fieldMap map[string]field.Expr
}

func (v verificationRequest) Table(newTableName string) *verificationRequest {
	v.verificationRequestDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v verificationRequest) As(alias string) *verificationRequest {
	v.verificationRequestDo.DO = *(v.verificationRequestDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *verificationRequest) updateTableName(table string) *verificationRequest {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.UserID = field.NewString(table, "userId")
	v.Password = field.NewString(table, "password")
	v.Code = field.NewString(table, "code")
	v.ExpirationTimestamp = field.NewInt64(table, "expirationTimestamp")

	v.fillFieldMap()

	return v
}

func (v *verificationRequest) WithContext(ctx context.Context) *verificationRequestDo {
	return v.verificationRequestDo.WithContext(ctx)
}

func (v verificationRequest) TableName() string { return v.verificationRequestDo.TableName() }

func (v verificationRequest) Alias() string { return v.verificationRequestDo.Alias() }

func (v verificationRequest) Columns(cols ...field.Expr) gen.Columns {
	return v.verificationRequestDo.Columns(cols...)
}

func (v *verificationRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *verificationRequest) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["id"] = v.ID
	v.fieldMap["userId"] = v.UserID
	v.fieldMap["password"] = v.Password
	v.fieldMap["code"] = v.Code
	v.fieldMap["expirationTimestamp"] = v.ExpirationTimestamp
}

func (v verificationRequest) clone(db *gorm.DB) verificationRequest {
	v.verificationRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v verificationRequest) replaceDB(db *gorm.DB) verificationRequest {
	v.verificationRequestDo.ReplaceDB(db)
	return v
}

type verificationRequestDo struct{ gen.DO }

func (v verificationRequestDo) Debug() *verificationRequestDo {
	return v.withDO(v.DO.Debug())
}

func (v verificationRequestDo) WithContext(ctx context.Context) *verificationRequestDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v verificationRequestDo) ReadDB() *verificationRequestDo {
	return v.Clauses(dbresolver.Read)
}

func (v verificationRequestDo) WriteDB() *verificationRequestDo {
	return v.Clauses(dbresolver.Write)
}

func (v verificationRequestDo) Session(config *gorm.Session) *verificationRequestDo {
	return v.withDO(v.DO.Session(config))
}

func (v verificationRequestDo) Clauses(conds ...clause.Expression) *verificationRequestDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v verificationRequestDo) Returning(value interface{}, columns ...string) *verificationRequestDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v verificationRequestDo) Not(conds ...gen.Condition) *verificationRequestDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v verificationRequestDo) Or(conds ...gen.Condition) *verificationRequestDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v verificationRequestDo) Select(conds ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v verificationRequestDo) Where(conds ...gen.Condition) *verificationRequestDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v verificationRequestDo) Order(conds ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v verificationRequestDo) Distinct(cols ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v verificationRequestDo) Omit(cols ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v verificationRequestDo) Join(table schema.Tabler, on ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v verificationRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v verificationRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v verificationRequestDo) Group(cols ...field.Expr) *verificationRequestDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v verificationRequestDo) Having(conds ...gen.Condition) *verificationRequestDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v verificationRequestDo) Limit(limit int) *verificationRequestDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v verificationRequestDo) Offset(offset int) *verificationRequestDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v verificationRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *verificationRequestDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v verificationRequestDo) Unscoped() *verificationRequestDo {
	return v.withDO(v.DO.Unscoped())
}

func (v verificationRequestDo) Create(values ...*model.VerificationRequest) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v verificationRequestDo) CreateInBatches(values []*model.VerificationRequest, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v verificationRequestDo) Save(values ...*model.VerificationRequest) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v verificationRequestDo) First() (*model.VerificationRequest, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerificationRequest), nil
	}
}

func (v verificationRequestDo) Take() (*model.VerificationRequest, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerificationRequest), nil
	}
}

func (v verificationRequestDo) Last() (*model.VerificationRequest, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerificationRequest), nil
	}
}

func (v verificationRequestDo) Find() ([]*model.VerificationRequest, error) {
	result, err := v.DO.Find()
	return result.([]*model.VerificationRequest), err
}

func (v verificationRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VerificationRequest, err error) {
	buf := make([]*model.VerificationRequest, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v verificationRequestDo) FindInBatches(result *[]*model.VerificationRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v verificationRequestDo) Attrs(attrs ...field.AssignExpr) *verificationRequestDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v verificationRequestDo) Assign(attrs ...field.AssignExpr) *verificationRequestDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v verificationRequestDo) Joins(fields ...field.RelationField) *verificationRequestDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v verificationRequestDo) Preload(fields ...field.RelationField) *verificationRequestDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v verificationRequestDo) FirstOrInit() (*model.VerificationRequest, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerificationRequest), nil
	}
}

func (v verificationRequestDo) FirstOrCreate() (*model.VerificationRequest, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VerificationRequest), nil
	}
}

func (v verificationRequestDo) FindByPage(offset int, limit int) (result []*model.VerificationRequest, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v verificationRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v verificationRequestDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v verificationRequestDo) Delete(models ...*model.VerificationRequest) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *verificationRequestDo) withDO(do gen.Dao) *verificationRequestDo {
	v.DO = *do.(*gen.DO)
	return v
}
