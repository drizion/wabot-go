// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newCasinoSession(db *gorm.DB, opts ...gen.DOOption) casinoSession {
	_casinoSession := casinoSession{}

	_casinoSession.casinoSessionDo.UseDB(db, opts...)
	_casinoSession.casinoSessionDo.UseModel(&model.CasinoSession{})

	tableName := _casinoSession.casinoSessionDo.TableName()
	_casinoSession.ALL = field.NewAsterisk(tableName)
	_casinoSession.ID = field.NewString(tableName, "id")
	_casinoSession.FinishedAt = field.NewTime(tableName, "finishedAt")
	_casinoSession.CreatedAt = field.NewTime(tableName, "createdAt")
	_casinoSession.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_casinoSession.Amount = field.NewInt32(tableName, "amount")
	_casinoSession.BotUserID = field.NewString(tableName, "botUserId")
	_casinoSession.GroupID = field.NewString(tableName, "groupId")
	_casinoSession.Status = field.NewString(tableName, "status")

	_casinoSession.fillFieldMap()

	return _casinoSession
}

type casinoSession struct {
	casinoSessionDo casinoSessionDo

	ALL        field.Asterisk
	ID         field.String
	FinishedAt field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Amount     field.Int32
	BotUserID  field.String
	GroupID    field.String
	Status     field.String

	fieldMap map[string]field.Expr
}

func (c casinoSession) Table(newTableName string) *casinoSession {
	c.casinoSessionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c casinoSession) As(alias string) *casinoSession {
	c.casinoSessionDo.DO = *(c.casinoSessionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *casinoSession) updateTableName(table string) *casinoSession {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.FinishedAt = field.NewTime(table, "finishedAt")
	c.CreatedAt = field.NewTime(table, "createdAt")
	c.UpdatedAt = field.NewTime(table, "updatedAt")
	c.Amount = field.NewInt32(table, "amount")
	c.BotUserID = field.NewString(table, "botUserId")
	c.GroupID = field.NewString(table, "groupId")
	c.Status = field.NewString(table, "status")

	c.fillFieldMap()

	return c
}

func (c *casinoSession) WithContext(ctx context.Context) *casinoSessionDo {
	return c.casinoSessionDo.WithContext(ctx)
}

func (c casinoSession) TableName() string { return c.casinoSessionDo.TableName() }

func (c casinoSession) Alias() string { return c.casinoSessionDo.Alias() }

func (c casinoSession) Columns(cols ...field.Expr) gen.Columns {
	return c.casinoSessionDo.Columns(cols...)
}

func (c *casinoSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *casinoSession) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["finishedAt"] = c.FinishedAt
	c.fieldMap["createdAt"] = c.CreatedAt
	c.fieldMap["updatedAt"] = c.UpdatedAt
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["botUserId"] = c.BotUserID
	c.fieldMap["groupId"] = c.GroupID
	c.fieldMap["status"] = c.Status
}

func (c casinoSession) clone(db *gorm.DB) casinoSession {
	c.casinoSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c casinoSession) replaceDB(db *gorm.DB) casinoSession {
	c.casinoSessionDo.ReplaceDB(db)
	return c
}

type casinoSessionDo struct{ gen.DO }

func (c casinoSessionDo) Debug() *casinoSessionDo {
	return c.withDO(c.DO.Debug())
}

func (c casinoSessionDo) WithContext(ctx context.Context) *casinoSessionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c casinoSessionDo) ReadDB() *casinoSessionDo {
	return c.Clauses(dbresolver.Read)
}

func (c casinoSessionDo) WriteDB() *casinoSessionDo {
	return c.Clauses(dbresolver.Write)
}

func (c casinoSessionDo) Session(config *gorm.Session) *casinoSessionDo {
	return c.withDO(c.DO.Session(config))
}

func (c casinoSessionDo) Clauses(conds ...clause.Expression) *casinoSessionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c casinoSessionDo) Returning(value interface{}, columns ...string) *casinoSessionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c casinoSessionDo) Not(conds ...gen.Condition) *casinoSessionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c casinoSessionDo) Or(conds ...gen.Condition) *casinoSessionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c casinoSessionDo) Select(conds ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c casinoSessionDo) Where(conds ...gen.Condition) *casinoSessionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c casinoSessionDo) Order(conds ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c casinoSessionDo) Distinct(cols ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c casinoSessionDo) Omit(cols ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c casinoSessionDo) Join(table schema.Tabler, on ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c casinoSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c casinoSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c casinoSessionDo) Group(cols ...field.Expr) *casinoSessionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c casinoSessionDo) Having(conds ...gen.Condition) *casinoSessionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c casinoSessionDo) Limit(limit int) *casinoSessionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c casinoSessionDo) Offset(offset int) *casinoSessionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c casinoSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *casinoSessionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c casinoSessionDo) Unscoped() *casinoSessionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c casinoSessionDo) Create(values ...*model.CasinoSession) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c casinoSessionDo) CreateInBatches(values []*model.CasinoSession, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c casinoSessionDo) Save(values ...*model.CasinoSession) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c casinoSessionDo) First() (*model.CasinoSession, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoSession), nil
	}
}

func (c casinoSessionDo) Take() (*model.CasinoSession, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoSession), nil
	}
}

func (c casinoSessionDo) Last() (*model.CasinoSession, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoSession), nil
	}
}

func (c casinoSessionDo) Find() ([]*model.CasinoSession, error) {
	result, err := c.DO.Find()
	return result.([]*model.CasinoSession), err
}

func (c casinoSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CasinoSession, err error) {
	buf := make([]*model.CasinoSession, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c casinoSessionDo) FindInBatches(result *[]*model.CasinoSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c casinoSessionDo) Attrs(attrs ...field.AssignExpr) *casinoSessionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c casinoSessionDo) Assign(attrs ...field.AssignExpr) *casinoSessionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c casinoSessionDo) Joins(fields ...field.RelationField) *casinoSessionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c casinoSessionDo) Preload(fields ...field.RelationField) *casinoSessionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c casinoSessionDo) FirstOrInit() (*model.CasinoSession, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoSession), nil
	}
}

func (c casinoSessionDo) FirstOrCreate() (*model.CasinoSession, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoSession), nil
	}
}

func (c casinoSessionDo) FindByPage(offset int, limit int) (result []*model.CasinoSession, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c casinoSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c casinoSessionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c casinoSessionDo) Delete(models ...*model.CasinoSession) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *casinoSessionDo) withDO(do gen.Dao) *casinoSessionDo {
	c.DO = *do.(*gen.DO)
	return c
}
