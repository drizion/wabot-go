// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newDailyBonu(db *gorm.DB, opts ...gen.DOOption) dailyBonu {
	_dailyBonu := dailyBonu{}

	_dailyBonu.dailyBonuDo.UseDB(db, opts...)
	_dailyBonu.dailyBonuDo.UseModel(&model.DailyBonu{})

	tableName := _dailyBonu.dailyBonuDo.TableName()
	_dailyBonu.ALL = field.NewAsterisk(tableName)
	_dailyBonu.ID = field.NewString(tableName, "id")
	_dailyBonu.BotUserID = field.NewString(tableName, "botUserId")
	_dailyBonu.CreatedAt = field.NewTime(tableName, "createdAt")

	_dailyBonu.fillFieldMap()

	return _dailyBonu
}

type dailyBonu struct {
	dailyBonuDo dailyBonuDo

	ALL       field.Asterisk
	ID        field.String
	BotUserID field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dailyBonu) Table(newTableName string) *dailyBonu {
	d.dailyBonuDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyBonu) As(alias string) *dailyBonu {
	d.dailyBonuDo.DO = *(d.dailyBonuDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyBonu) updateTableName(table string) *dailyBonu {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.BotUserID = field.NewString(table, "botUserId")
	d.CreatedAt = field.NewTime(table, "createdAt")

	d.fillFieldMap()

	return d
}

func (d *dailyBonu) WithContext(ctx context.Context) *dailyBonuDo {
	return d.dailyBonuDo.WithContext(ctx)
}

func (d dailyBonu) TableName() string { return d.dailyBonuDo.TableName() }

func (d dailyBonu) Alias() string { return d.dailyBonuDo.Alias() }

func (d dailyBonu) Columns(cols ...field.Expr) gen.Columns { return d.dailyBonuDo.Columns(cols...) }

func (d *dailyBonu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyBonu) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["botUserId"] = d.BotUserID
	d.fieldMap["createdAt"] = d.CreatedAt
}

func (d dailyBonu) clone(db *gorm.DB) dailyBonu {
	d.dailyBonuDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyBonu) replaceDB(db *gorm.DB) dailyBonu {
	d.dailyBonuDo.ReplaceDB(db)
	return d
}

type dailyBonuDo struct{ gen.DO }

func (d dailyBonuDo) Debug() *dailyBonuDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyBonuDo) WithContext(ctx context.Context) *dailyBonuDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyBonuDo) ReadDB() *dailyBonuDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyBonuDo) WriteDB() *dailyBonuDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyBonuDo) Session(config *gorm.Session) *dailyBonuDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyBonuDo) Clauses(conds ...clause.Expression) *dailyBonuDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyBonuDo) Returning(value interface{}, columns ...string) *dailyBonuDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyBonuDo) Not(conds ...gen.Condition) *dailyBonuDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyBonuDo) Or(conds ...gen.Condition) *dailyBonuDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyBonuDo) Select(conds ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyBonuDo) Where(conds ...gen.Condition) *dailyBonuDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyBonuDo) Order(conds ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyBonuDo) Distinct(cols ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyBonuDo) Omit(cols ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyBonuDo) Join(table schema.Tabler, on ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyBonuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyBonuDo) RightJoin(table schema.Tabler, on ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyBonuDo) Group(cols ...field.Expr) *dailyBonuDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyBonuDo) Having(conds ...gen.Condition) *dailyBonuDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyBonuDo) Limit(limit int) *dailyBonuDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyBonuDo) Offset(offset int) *dailyBonuDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyBonuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dailyBonuDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyBonuDo) Unscoped() *dailyBonuDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyBonuDo) Create(values ...*model.DailyBonu) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyBonuDo) CreateInBatches(values []*model.DailyBonu, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyBonuDo) Save(values ...*model.DailyBonu) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyBonuDo) First() (*model.DailyBonu, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyBonu), nil
	}
}

func (d dailyBonuDo) Take() (*model.DailyBonu, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyBonu), nil
	}
}

func (d dailyBonuDo) Last() (*model.DailyBonu, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyBonu), nil
	}
}

func (d dailyBonuDo) Find() ([]*model.DailyBonu, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyBonu), err
}

func (d dailyBonuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyBonu, err error) {
	buf := make([]*model.DailyBonu, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyBonuDo) FindInBatches(result *[]*model.DailyBonu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyBonuDo) Attrs(attrs ...field.AssignExpr) *dailyBonuDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyBonuDo) Assign(attrs ...field.AssignExpr) *dailyBonuDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyBonuDo) Joins(fields ...field.RelationField) *dailyBonuDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyBonuDo) Preload(fields ...field.RelationField) *dailyBonuDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyBonuDo) FirstOrInit() (*model.DailyBonu, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyBonu), nil
	}
}

func (d dailyBonuDo) FirstOrCreate() (*model.DailyBonu, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyBonu), nil
	}
}

func (d dailyBonuDo) FindByPage(offset int, limit int) (result []*model.DailyBonu, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyBonuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyBonuDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyBonuDo) Delete(models ...*model.DailyBonu) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyBonuDo) withDO(do gen.Dao) *dailyBonuDo {
	d.DO = *do.(*gen.DO)
	return d
}
