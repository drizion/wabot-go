// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newCasinoBet(db *gorm.DB, opts ...gen.DOOption) casinoBet {
	_casinoBet := casinoBet{}

	_casinoBet.casinoBetDo.UseDB(db, opts...)
	_casinoBet.casinoBetDo.UseModel(&model.CasinoBet{})

	tableName := _casinoBet.casinoBetDo.TableName()
	_casinoBet.ALL = field.NewAsterisk(tableName)
	_casinoBet.ID = field.NewString(tableName, "id")
	_casinoBet.CasinoSessionID = field.NewString(tableName, "casinoSessionId")
	_casinoBet.BotUserID = field.NewString(tableName, "botUserId")
	_casinoBet.Amount = field.NewInt32(tableName, "amount")
	_casinoBet.CreatedAt = field.NewTime(tableName, "createdAt")
	_casinoBet.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_casinoBet.Status = field.NewString(tableName, "status")

	_casinoBet.fillFieldMap()

	return _casinoBet
}

type casinoBet struct {
	casinoBetDo casinoBetDo

	ALL             field.Asterisk
	ID              field.String
	CasinoSessionID field.String
	BotUserID       field.String
	Amount          field.Int32
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Status          field.String

	fieldMap map[string]field.Expr
}

func (c casinoBet) Table(newTableName string) *casinoBet {
	c.casinoBetDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c casinoBet) As(alias string) *casinoBet {
	c.casinoBetDo.DO = *(c.casinoBetDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *casinoBet) updateTableName(table string) *casinoBet {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CasinoSessionID = field.NewString(table, "casinoSessionId")
	c.BotUserID = field.NewString(table, "botUserId")
	c.Amount = field.NewInt32(table, "amount")
	c.CreatedAt = field.NewTime(table, "createdAt")
	c.UpdatedAt = field.NewTime(table, "updatedAt")
	c.Status = field.NewString(table, "status")

	c.fillFieldMap()

	return c
}

func (c *casinoBet) WithContext(ctx context.Context) *casinoBetDo {
	return c.casinoBetDo.WithContext(ctx)
}

func (c casinoBet) TableName() string { return c.casinoBetDo.TableName() }

func (c casinoBet) Alias() string { return c.casinoBetDo.Alias() }

func (c casinoBet) Columns(cols ...field.Expr) gen.Columns { return c.casinoBetDo.Columns(cols...) }

func (c *casinoBet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *casinoBet) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["casinoSessionId"] = c.CasinoSessionID
	c.fieldMap["botUserId"] = c.BotUserID
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["createdAt"] = c.CreatedAt
	c.fieldMap["updatedAt"] = c.UpdatedAt
	c.fieldMap["status"] = c.Status
}

func (c casinoBet) clone(db *gorm.DB) casinoBet {
	c.casinoBetDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c casinoBet) replaceDB(db *gorm.DB) casinoBet {
	c.casinoBetDo.ReplaceDB(db)
	return c
}

type casinoBetDo struct{ gen.DO }

func (c casinoBetDo) Debug() *casinoBetDo {
	return c.withDO(c.DO.Debug())
}

func (c casinoBetDo) WithContext(ctx context.Context) *casinoBetDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c casinoBetDo) ReadDB() *casinoBetDo {
	return c.Clauses(dbresolver.Read)
}

func (c casinoBetDo) WriteDB() *casinoBetDo {
	return c.Clauses(dbresolver.Write)
}

func (c casinoBetDo) Session(config *gorm.Session) *casinoBetDo {
	return c.withDO(c.DO.Session(config))
}

func (c casinoBetDo) Clauses(conds ...clause.Expression) *casinoBetDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c casinoBetDo) Returning(value interface{}, columns ...string) *casinoBetDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c casinoBetDo) Not(conds ...gen.Condition) *casinoBetDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c casinoBetDo) Or(conds ...gen.Condition) *casinoBetDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c casinoBetDo) Select(conds ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c casinoBetDo) Where(conds ...gen.Condition) *casinoBetDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c casinoBetDo) Order(conds ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c casinoBetDo) Distinct(cols ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c casinoBetDo) Omit(cols ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c casinoBetDo) Join(table schema.Tabler, on ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c casinoBetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c casinoBetDo) RightJoin(table schema.Tabler, on ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c casinoBetDo) Group(cols ...field.Expr) *casinoBetDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c casinoBetDo) Having(conds ...gen.Condition) *casinoBetDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c casinoBetDo) Limit(limit int) *casinoBetDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c casinoBetDo) Offset(offset int) *casinoBetDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c casinoBetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *casinoBetDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c casinoBetDo) Unscoped() *casinoBetDo {
	return c.withDO(c.DO.Unscoped())
}

func (c casinoBetDo) Create(values ...*model.CasinoBet) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c casinoBetDo) CreateInBatches(values []*model.CasinoBet, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c casinoBetDo) Save(values ...*model.CasinoBet) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c casinoBetDo) First() (*model.CasinoBet, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoBet), nil
	}
}

func (c casinoBetDo) Take() (*model.CasinoBet, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoBet), nil
	}
}

func (c casinoBetDo) Last() (*model.CasinoBet, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoBet), nil
	}
}

func (c casinoBetDo) Find() ([]*model.CasinoBet, error) {
	result, err := c.DO.Find()
	return result.([]*model.CasinoBet), err
}

func (c casinoBetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CasinoBet, err error) {
	buf := make([]*model.CasinoBet, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c casinoBetDo) FindInBatches(result *[]*model.CasinoBet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c casinoBetDo) Attrs(attrs ...field.AssignExpr) *casinoBetDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c casinoBetDo) Assign(attrs ...field.AssignExpr) *casinoBetDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c casinoBetDo) Joins(fields ...field.RelationField) *casinoBetDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c casinoBetDo) Preload(fields ...field.RelationField) *casinoBetDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c casinoBetDo) FirstOrInit() (*model.CasinoBet, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoBet), nil
	}
}

func (c casinoBetDo) FirstOrCreate() (*model.CasinoBet, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasinoBet), nil
	}
}

func (c casinoBetDo) FindByPage(offset int, limit int) (result []*model.CasinoBet, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c casinoBetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c casinoBetDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c casinoBetDo) Delete(models ...*model.CasinoBet) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *casinoBetDo) withDO(do gen.Dao) *casinoBetDo {
	c.DO = *do.(*gen.DO)
	return c
}
