// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newBotUser(db *gorm.DB, opts ...gen.DOOption) botUser {
	_botUser := botUser{}

	_botUser.botUserDo.UseDB(db, opts...)
	_botUser.botUserDo.UseModel(&model.BotUser{})

	tableName := _botUser.botUserDo.TableName()
	_botUser.ALL = field.NewAsterisk(tableName)
	_botUser.ID = field.NewString(tableName, "id")
	_botUser.AdsCounter = field.NewInt32(tableName, "adsCounter")
	_botUser.WaCoins = field.NewInt32(tableName, "waCoins")
	_botUser.VerifiedAt = field.NewTime(tableName, "verifiedAt")
	_botUser.CreatedAt = field.NewTime(tableName, "createdAt")

	_botUser.fillFieldMap()

	return _botUser
}

type botUser struct {
	botUserDo botUserDo

	ALL        field.Asterisk
	ID         field.String
	AdsCounter field.Int32
	WaCoins    field.Int32
	VerifiedAt field.Time
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (b botUser) Table(newTableName string) *botUser {
	b.botUserDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b botUser) As(alias string) *botUser {
	b.botUserDo.DO = *(b.botUserDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *botUser) updateTableName(table string) *botUser {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.AdsCounter = field.NewInt32(table, "adsCounter")
	b.WaCoins = field.NewInt32(table, "waCoins")
	b.VerifiedAt = field.NewTime(table, "verifiedAt")
	b.CreatedAt = field.NewTime(table, "createdAt")

	b.fillFieldMap()

	return b
}

func (b *botUser) WithContext(ctx context.Context) *botUserDo { return b.botUserDo.WithContext(ctx) }

func (b botUser) TableName() string { return b.botUserDo.TableName() }

func (b botUser) Alias() string { return b.botUserDo.Alias() }

func (b botUser) Columns(cols ...field.Expr) gen.Columns { return b.botUserDo.Columns(cols...) }

func (b *botUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *botUser) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["adsCounter"] = b.AdsCounter
	b.fieldMap["waCoins"] = b.WaCoins
	b.fieldMap["verifiedAt"] = b.VerifiedAt
	b.fieldMap["createdAt"] = b.CreatedAt
}

func (b botUser) clone(db *gorm.DB) botUser {
	b.botUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b botUser) replaceDB(db *gorm.DB) botUser {
	b.botUserDo.ReplaceDB(db)
	return b
}

type botUserDo struct{ gen.DO }

func (b botUserDo) Debug() *botUserDo {
	return b.withDO(b.DO.Debug())
}

func (b botUserDo) WithContext(ctx context.Context) *botUserDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b botUserDo) ReadDB() *botUserDo {
	return b.Clauses(dbresolver.Read)
}

func (b botUserDo) WriteDB() *botUserDo {
	return b.Clauses(dbresolver.Write)
}

func (b botUserDo) Session(config *gorm.Session) *botUserDo {
	return b.withDO(b.DO.Session(config))
}

func (b botUserDo) Clauses(conds ...clause.Expression) *botUserDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b botUserDo) Returning(value interface{}, columns ...string) *botUserDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b botUserDo) Not(conds ...gen.Condition) *botUserDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b botUserDo) Or(conds ...gen.Condition) *botUserDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b botUserDo) Select(conds ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b botUserDo) Where(conds ...gen.Condition) *botUserDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b botUserDo) Order(conds ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b botUserDo) Distinct(cols ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b botUserDo) Omit(cols ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b botUserDo) Join(table schema.Tabler, on ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b botUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *botUserDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b botUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *botUserDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b botUserDo) Group(cols ...field.Expr) *botUserDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b botUserDo) Having(conds ...gen.Condition) *botUserDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b botUserDo) Limit(limit int) *botUserDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b botUserDo) Offset(offset int) *botUserDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b botUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *botUserDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b botUserDo) Unscoped() *botUserDo {
	return b.withDO(b.DO.Unscoped())
}

func (b botUserDo) Create(values ...*model.BotUser) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b botUserDo) CreateInBatches(values []*model.BotUser, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b botUserDo) Save(values ...*model.BotUser) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b botUserDo) First() (*model.BotUser, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotUser), nil
	}
}

func (b botUserDo) Take() (*model.BotUser, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotUser), nil
	}
}

func (b botUserDo) Last() (*model.BotUser, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotUser), nil
	}
}

func (b botUserDo) Find() ([]*model.BotUser, error) {
	result, err := b.DO.Find()
	return result.([]*model.BotUser), err
}

func (b botUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BotUser, err error) {
	buf := make([]*model.BotUser, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b botUserDo) FindInBatches(result *[]*model.BotUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b botUserDo) Attrs(attrs ...field.AssignExpr) *botUserDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b botUserDo) Assign(attrs ...field.AssignExpr) *botUserDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b botUserDo) Joins(fields ...field.RelationField) *botUserDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b botUserDo) Preload(fields ...field.RelationField) *botUserDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b botUserDo) FirstOrInit() (*model.BotUser, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotUser), nil
	}
}

func (b botUserDo) FirstOrCreate() (*model.BotUser, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BotUser), nil
	}
}

func (b botUserDo) FindByPage(offset int, limit int) (result []*model.BotUser, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b botUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b botUserDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b botUserDo) Delete(models ...*model.BotUser) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *botUserDo) withDO(do gen.Dao) *botUserDo {
	b.DO = *do.(*gen.DO)
	return b
}
