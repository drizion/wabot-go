// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/drizion/wabot-go/database/model"
)

func newChatgpt(db *gorm.DB, opts ...gen.DOOption) chatgpt {
	_chatgpt := chatgpt{}

	_chatgpt.chatgptDo.UseDB(db, opts...)
	_chatgpt.chatgptDo.UseModel(&model.Chatgpt{})

	tableName := _chatgpt.chatgptDo.TableName()
	_chatgpt.ALL = field.NewAsterisk(tableName)
	_chatgpt.ID = field.NewInt32(tableName, "id")
	_chatgpt.From = field.NewString(tableName, "from")
	_chatgpt.Message = field.NewString(tableName, "message")
	_chatgpt.CreatedAt = field.NewTime(tableName, "createdAt")

	_chatgpt.fillFieldMap()

	return _chatgpt
}

type chatgpt struct {
	chatgptDo chatgptDo

	ALL       field.Asterisk
	ID        field.Int32
	From      field.String
	Message   field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c chatgpt) Table(newTableName string) *chatgpt {
	c.chatgptDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatgpt) As(alias string) *chatgpt {
	c.chatgptDo.DO = *(c.chatgptDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatgpt) updateTableName(table string) *chatgpt {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.From = field.NewString(table, "from")
	c.Message = field.NewString(table, "message")
	c.CreatedAt = field.NewTime(table, "createdAt")

	c.fillFieldMap()

	return c
}

func (c *chatgpt) WithContext(ctx context.Context) *chatgptDo { return c.chatgptDo.WithContext(ctx) }

func (c chatgpt) TableName() string { return c.chatgptDo.TableName() }

func (c chatgpt) Alias() string { return c.chatgptDo.Alias() }

func (c chatgpt) Columns(cols ...field.Expr) gen.Columns { return c.chatgptDo.Columns(cols...) }

func (c *chatgpt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatgpt) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["from"] = c.From
	c.fieldMap["message"] = c.Message
	c.fieldMap["createdAt"] = c.CreatedAt
}

func (c chatgpt) clone(db *gorm.DB) chatgpt {
	c.chatgptDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatgpt) replaceDB(db *gorm.DB) chatgpt {
	c.chatgptDo.ReplaceDB(db)
	return c
}

type chatgptDo struct{ gen.DO }

func (c chatgptDo) Debug() *chatgptDo {
	return c.withDO(c.DO.Debug())
}

func (c chatgptDo) WithContext(ctx context.Context) *chatgptDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatgptDo) ReadDB() *chatgptDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatgptDo) WriteDB() *chatgptDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatgptDo) Session(config *gorm.Session) *chatgptDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatgptDo) Clauses(conds ...clause.Expression) *chatgptDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatgptDo) Returning(value interface{}, columns ...string) *chatgptDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatgptDo) Not(conds ...gen.Condition) *chatgptDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatgptDo) Or(conds ...gen.Condition) *chatgptDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatgptDo) Select(conds ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatgptDo) Where(conds ...gen.Condition) *chatgptDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatgptDo) Order(conds ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatgptDo) Distinct(cols ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatgptDo) Omit(cols ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatgptDo) Join(table schema.Tabler, on ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatgptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatgptDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatgptDo) Group(cols ...field.Expr) *chatgptDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatgptDo) Having(conds ...gen.Condition) *chatgptDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatgptDo) Limit(limit int) *chatgptDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatgptDo) Offset(offset int) *chatgptDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatgptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatgptDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatgptDo) Unscoped() *chatgptDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatgptDo) Create(values ...*model.Chatgpt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatgptDo) CreateInBatches(values []*model.Chatgpt, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatgptDo) Save(values ...*model.Chatgpt) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatgptDo) First() (*model.Chatgpt, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatgpt), nil
	}
}

func (c chatgptDo) Take() (*model.Chatgpt, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatgpt), nil
	}
}

func (c chatgptDo) Last() (*model.Chatgpt, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatgpt), nil
	}
}

func (c chatgptDo) Find() ([]*model.Chatgpt, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chatgpt), err
}

func (c chatgptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chatgpt, err error) {
	buf := make([]*model.Chatgpt, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatgptDo) FindInBatches(result *[]*model.Chatgpt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatgptDo) Attrs(attrs ...field.AssignExpr) *chatgptDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatgptDo) Assign(attrs ...field.AssignExpr) *chatgptDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatgptDo) Joins(fields ...field.RelationField) *chatgptDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatgptDo) Preload(fields ...field.RelationField) *chatgptDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatgptDo) FirstOrInit() (*model.Chatgpt, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatgpt), nil
	}
}

func (c chatgptDo) FirstOrCreate() (*model.Chatgpt, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatgpt), nil
	}
}

func (c chatgptDo) FindByPage(offset int, limit int) (result []*model.Chatgpt, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatgptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatgptDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatgptDo) Delete(models ...*model.Chatgpt) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatgptDo) withDO(do gen.Dao) *chatgptDo {
	c.DO = *do.(*gen.DO)
	return c
}
